import telebot
import random
import json
import requests

TOKEN = '7231586415:AAGAb5nQGQ-gCSJaTO7F266mPpYs2eRNP7g'
bot = telebot.TeleBot(TOKEN)

users = {}
waiting_users = []

OPENAI_KEY = "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"

def ask_gpt(prompt):
    headers = {
        "Authorization": f"Bearer {OPENAI_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "gpt-3.5-turbo",
        "messages": [{"role": "user", "content": prompt}]
    }
    response = requests.post("https://api.openai.com/v1/chat/completions", headers=headers, json=data)
    if response.status_code == 200:
        return response.json()["choices"][0]["message"]["content"]
    else:
        return "‚ö†Ô∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.chat.id
    users[user_id] = {'partner': None, 'is_ai': False}
    bot.send_message(user_id, "üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ /search —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

@bot.message_handler(commands=['search'])
def search(message):
    user_id = message.chat.id
    if users[user_id]['partner']:
        bot.send_message(user_id, "‚ùó –í—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /stop —á—Ç–æ–±—ã –≤—ã–π—Ç–∏.")
        return
    if waiting_users:
        partner_id = waiting_users.pop(0)
        users[user_id]['partner'] = partner_id
        users[partner_id]['partner'] = user_id
        bot.send_message(user_id, "‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        bot.send_message(partner_id, "‚úÖ –í—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        waiting_users.append(user_id)
        bot.send_message(user_id, "‚è≥ –û–∂–∏–¥–∞–µ–º –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")

@bot.message_handler(commands=['stop'])
def stop(message):
    user_id = message.chat.id
    partner_id = users[user_id].get('partner')
    if partner_id:
        users[partner_id]['partner'] = None
        bot.send_message(partner_id, "‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç.")
    users[user_id]['partner'] = None
    bot.send_message(user_id, "üö´ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —á–∞—Ç.")

@bot.message_handler(func=lambda m: True)
def chat(message):
    user_id = message.chat.id
    partner_id = users[user_id].get('partner')

    if partner_id:
        if users[partner_id].get('is_ai'):
            reply = ask_gpt(message.text)
            bot.send_message(user_id, reply)
        else:
            bot.send_message(partner_id, message.text)
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞, –ø–æ–¥–∫–ª—é—á–∞–µ–º –ò–ò
        ai_id = f'ai_{user_id}'
        users[user_id]['partner'] = ai_id
        users[ai_id] = {'partner': user_id, 'is_ai': True}
        bot.send_message(user_id, "ü§ñ –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫. –ù–∞—á–Ω–∏—Ç–µ —Ä–∞–∑–≥–æ–≤–æ—Ä!")

bot.polling()
